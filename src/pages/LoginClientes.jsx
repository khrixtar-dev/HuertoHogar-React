import { useNavigate } from "react-router-dom";
import { useState } from "react";
import { Container, Row, Col, Form, Button } from "react-bootstrap";
import { Link } from "react-router-dom";
import Swal from "sweetalert2";

import {
  validarLogin,
  validarPermisos,
} from "../../public/js/validacionesLogin";
import { usuarios } from "../../public/js/usuarios";

import "../css/login-clientes.css";

export default function LoginCliente() {
  const [correo, setCorreo] = useState("");
  const [contraseÃ±a, setContraseÃ±a] = useState("");
  const navigate = useNavigate();

  const submitCredenciales = (e) => {
    e.preventDefault();

    // âœ… 1. Validar formato del correo y contraseÃ±a
    const errores = validarLogin(correo, contraseÃ±a);
    if (errores.length > 0) {
      Swal.fire({
        icon: "error",
        title: "Errores de validaciÃ³n",
        html: errores.map((e) => `â€¢ ${e}`).join("<br>"),
        toast: true,
        position: "bottom-center",
        timer: 3500,
        showConfirmButton: false,
      });
      return;
    }

    // âœ… 2. Buscar usuario en la lista
    const usuario = usuarios.find(
      (u) => u.correo === correo && u.contraseÃ±a === contraseÃ±a
    );

    // Si no se encontrÃ³ usuario
    if (!usuario) {
      Swal.fire({
        icon: "error",
        title: "Credenciales incorrectas",
        text: "El correo o la contraseÃ±a no coinciden con ningÃºn usuario registrado.",
        toast: true,
        position: "bottom-center",
        timer: 3000,
        showConfirmButton: false,
      });
      return;
    }

    // âœ… 3. Validar permisos (solo clientes pueden acceder aquÃ­)
    const permisoError = validarPermisos(usuario, "cliente");
    if (permisoError) {
      Swal.fire({
        icon: "warning",
        title: "Acceso restringido",
        text: permisoError,
        toast: true,
        position: "bottom-center",
        timer: 3000,
        showConfirmButton: false,
      });
      return;
    }

    // âœ… 4. Guardar sesiÃ³n en localStorage
    localStorage.setItem("cuentaIniciada", "true");
    localStorage.setItem("usuarioActual", JSON.stringify(usuario));

    // âœ… 5. Mostrar mensaje de Ã©xito
    Swal.fire({
      icon: "success",
      title: `Â¡Bienvenido, ${usuario.nombre}!`,
      text: "Inicio de sesiÃ³n exitoso",
      toast: true,
      position: "bottom-center",
      timer: 1800,
      showConfirmButton: false,
    });

    // âœ… 6. Redirigir y actualizar navbar al finalizar la animaciÃ³n
    setTimeout(() => {
      navigate("/");
      window.dispatchEvent(new Event("sesionActualizada"));
    }, 1800);
  };

  return (
    <Container fluid className="login-fullscreen p-0">
      <Row className="g-0 vh-100">
        {/* MITAD IZQUIERDA */}
        <Col
          md={6}
          className="login-left-cliente d-flex flex-column justify-content-center align-items-center text-center p-5"
        >
          <div className="logo-box mb-4 d-flex align-items-center justify-content-center">
            <img
              src="/img/navbar_footer_/LogoHuertoHogar.png"
              alt="Huerto Hogar"
              style={{ width: "120px", height: "auto" }}
            />
          </div>

          <h2 className="fw-bold text-success mb-2">Huerto Hogar</h2>
          <p className="text-muted mb-4">Inicia sesiÃ³n en tu cuenta</p>

          <Form
            style={{ width: "80%", maxWidth: "400px" }}
            onSubmit={submitCredenciales}
          >
            <Form.Group className="mb-3" controlId="email">
              <Form.Control
                type="email"
                placeholder="Correo electrÃ³nico"
                value={correo}
                onChange={(e) => setCorreo(e.target.value)}
                required
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="password">
              <Form.Control
                type="password"
                placeholder="ContraseÃ±a"
                value={contraseÃ±a}
                onChange={(e) => setContraseÃ±a(e.target.value)}
                required
              />
            </Form.Group>

            <Button type="submit" className="w-100 btn-green mb-3">
              INGRESAR
            </Button>

            <a href="#" className="small text-success d-block mb-2">
              Â¿Olvidaste tu contraseÃ±a?
            </a>
            <p className="small">
              Â¿No tienes una cuenta?{" "}
              <Link to="/registro" className="text-success fw-semibold" translate="no">
                RegÃ­strate
              </Link>
            </p>
          </Form>
        </Col>

        {/* MITAD DERECHA */}
        <Col
          md={6}
          className="login-right-cliente d-flex flex-column justify-content-center align-items-center text-center p-5"
        >
          <h3 className="fw-bold mb-3">MÃ¡s que una comunidad</h3>
          <p className="px-5">
            Ãšnete a Huerto Hogar y aprende a cultivar, cuidar y disfrutar de tu
            propio huerto ðŸŒ¿
          </p>
        </Col>
      </Row>
    </Container>
  );
}
